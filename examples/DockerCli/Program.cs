using CliBuilderCore;
using CliBuilderCore.CommandBuilding;
using DockerCli.Commands;

var runCommandTemplateBuilder = new TemplateBuilder()
    .WithName("run")
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--name")
        .WithAlias("-n")
        .IsRequired()
        .ValueTemplate("[[Name]]")
        .WithDescription("container name")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("-e")
        .IsRepeatable()
        .MapToCompositeProperty("EnvironmentVariables")
        .ValueTemplate("[[Name]]=[[Value]]")
        .WithDescription("environment variables")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("-v")
        .IsRepeatable()
        .MapToCompositeProperty("Volumes")
        .ValueTemplate("[[Name]]:[[MapTo]]")
        .WithDescription("volumes")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("-d")
        .IsRequired()
        .MapToCompositeProperty("Description")
        .ValueTemplate("[[Name]]:[[Tag]]")
        .WithDescription("description")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("-p")
        .ValueTemplate("[[PortExternal]]:[[PortInternal]]")
        .WithDescription("ports mapping")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--restart")
        .ValueTemplate("[[RestartType]]")
        .WithDescription("restart type")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--network")
        .ValueTemplate("[[Network]]")
        .WithDescription("network name")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--rm")
        .OnlyName("Removed")
        .WithDescription("automatically remove the container when it exits"));

var buildCommandTemplateBuilder = new TemplateBuilder()
    .WithName("build")
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--file")
        .WithAlias("-f")
        .IsRequired()
        .ValueTemplate("[[DockerfileName]]")
        .WithDescription("name of the Dockerfile")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--tag")
        .WithAlias("-t")
        .IsRequired()
        .ValueTemplate("[[Name]]:[[Tag]]")
        .WithDescription("name and optionally a tag in the name:tag format")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--network")
        .ValueTemplate("[[Network]]")
        .WithDescription("network name")
    )
    .AddParameter(new TemplateParameterBuilder()
        .WithName("--rm")
        .OnlyName("Removed")
        .WithDescription("remove intermediate containers after a successful build"));

var cts = new CancellationTokenSource();

var cli = new CliBuilder()
    .RegisterCommand<RunCommand>(runCommandTemplateBuilder, (cmd, _, _) => { }, "Run a command in a new container")
    .RegisterCommand<BuildCommand>(buildCommandTemplateBuilder, (cmd, _, _) => { }, "Build an image from a Dockerfile")
    .RegisterCommand<EmptyCommand>("exit", (_, _, _) => { cts.Cancel(); })
    .SupportHelpCommand(generate: true)
    .Build();

cli.Run(cts.Token);